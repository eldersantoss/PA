= Processamento Digital de Imagens - Atividades
Elder Santos <elder_rn@hotmail.com>
:toc: left
:toc-title: Sumário
:source-highlighter: pygments

== Introdução

Olá! Esta página é dedicada à postagem de atividades desenvolvidas envolvendo conceitos estudados na disciplina de Pocessamento Digital de Imagens, ministrada pelo professor Agostinho Brito Júnior, na UFRN.

Para melhor compreensão dos exercícios desenvolvidos e maiores informações de como compilar e executar os códigos que aqui serão mostrados, sugere-se a leitura dos enunciados e conteúdos abordados nas atividades, disponíveis link:https://agostinhobritojr.github.io/tutoriais/pdi/[aqui].


== 1. Negativo de região

Na atividade, solicitou-se uma implementação com base no código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/pixels/pixels.cpp[pixels.cpp] que, a partir de dois pontos P1 e P2 dentro de uma imagem, realizasse a inversão das cores na área do retângulo cujos vértices seriam delimitados pelos pontos fornecidos, causando um efeito de imagem negativa.

Download do código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/regions/regions.cpp[regions.cpp].

.regions.cpp
[source, cpp]
----
include::disciplinas/pdi/unidade1/regions/regions.cpp[]
----

.Imagem com região negativada
image::imagens/negativa.jpg[]


== 2. Troca de regiões

Neste exercícios, foi pedido que com base no mesmo programa link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/pixels/pixels.cpp[pixels], fosse desenvolvido um programa capaz de trocar de posição os quadrantes de uma determinada imagem.

Download do código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/troca_regioes/trocaregioes.cpp[troca_regioes.cpp].

.trocaregioes.cpp
[source, cpp]
----
include::disciplinas/pdi/unidade1/troca_regioes/trocaregioes.cpp[]
----

.Imagem com quadrantes trocados
image::imagens/regioes_trocadas.jpg[]


== 3. Rotulação de objetos

Nesta atividade, foi solicitado que se aprimorasse o algoritmo de contagem link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/labeling/labeling.cpp[labeling.cpp] para que pudesse atingir valores superiores a 255 e, além disso, identificar regiões com ou sem buracos, excluindo aquelas que tocam as bordas da imagem. O código seguinte sintetiza o que foi solicitado nos dois passos do link:https://agostinhobritojr.github.io/tutoriais/pdi/#_exerc%C3%ADcios_2[Exercícios 3.2].

Download do código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/labeling/new_labeling.cpp[new_labeling.cpp].

.new_labeling.cpp
[source, cpp]
----
include::disciplinas/pdi/unidade1/labeling/new_labeling.cpp[]
----

.Imagem original utilizada na contagem
image::imagens/bolhas.png[]

.Imagem removendo os objetos que tocam as bordas
image::imagens/labelingsemborda.png[]

.Imagem destacando os objetos que possuem 'buracos'
image::imagens/labelingcomburacos.png[]

.Resultados da contagem
image::imagens/new_labeling_resultados.png[]


== 4. Manipulação de histograma

=== 4.1. Equalização

Neste exercícios, foi solicitado que, com base no programa link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/histogram/histogram.cpp[histogram.cpp], que calcula o histograma de uma imagem capturada em tempo real direto de um dispositivo de vídeo, se realizasse a equalização desse histograma.

Download do código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/histogram/equalize.cpp[equalize.cpp].

[source, cpp]
----
include::disciplinas/pdi/unidade1/histogram/equalize.cpp[]
----

.Imagem sem equalização
image::imagens/hist_origi.png[]

.Imagem equalizada
image::imagens/hist_eqlz.png[]


=== 4.2. Detector de movimentos

Prosseguindo nos exercícios relacionados à manipulação de histograma, solicitou-se que, ainda baseando-se no código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/histogram/histogram.cpp[histogram.cpp], a partir da comparação do histograma atual com o último histograma de quadros capturados continuamente, fosse realizada a decteção de movimento na imagem com base na diferença entre os dois histogramas.

Download do código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/histogram/motiondetector.cpp[motiondetector.cpp].

[source, cpp]
----
include::disciplinas/pdi/unidade1/histogram/motiondetector.cpp[]
----


== 5. Aplicação de filtros espaciais

Nesta atividade, foi solicitado que se fizesse uma alteração no código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/filtro_espacial/filtroespacial.cpp[filtroespacial.cpp], de modo à adicionar mais uma opção de filtragem, o laplaciano do gaussiano. Isto é, realizar a aplicação de ambos os filtros simultanemante na mesma imagem.

Download do código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/filtro_espacial/laplgauss.cpp[laplgauss.cpp].

.laplgauss.cpp
[source, cpp]
----
include::disciplinas/pdi/unidade1/filtro_espacial/laplgauss.cpp[]
----

.Imagem original
image::imagens/filtro_orig.png[]

.Imagem apenas com filtro laplaciano
image::imagens/filtro_laplaciano.png[]

.Imagem com filtro laplaciano do gaussiano
image::imagens/filtro_laplgauss.png[]


== 6. Filtragem no domínio espacial

=== 6.1. Tiltshift em imagens

Na presente atividade, solicitou-se que se implementasse um programa, com base no código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/tiltshift/addweighted.cpp[addweighted.cpp], capaz de simular o famoso efeito tiltshift em uma imagem.

Download do código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/tiltshift/tiltshift.cpp[tiltshift.cpp].

.tiltshift.cpp
[source, cpp]
----
include::disciplinas/pdi/unidade1/tiltshift/tiltshift.cpp[]
----

.Imagem original
image::imagens/campnou.jpg[]

.Imagem com tiltshift
image::imagens/tiltshift_resultado.png[]


=== 6.2. Tiltshift em vídeos

Dando continuidade à exploração dos filtros espaciais, com base no mesmo link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/tiltshift/addweighted.cpp[addweighted.cpp], solicitou-se que fosse implementado um programa capaz de aplicar o efeito Tiltshift em conjunto com Stop Motion em um vídeo e, em seguida, salvasse o resultado em outro arquivo de vídeo.

Download do código link:https://eldersantoss.github.io/disciplinas/pdi/unidade1/tiltshift/tiltshiftvideo.cpp[tiltshiftvideo.cpp].

.tiltshiftvideo.cpp
[source, cpp]
----
include::disciplinas/pdi/unidade1/tiltshift/tiltshiftvideo.cpp[]
----

.Vídeo com os efeitos de tiltshift e stop motion
video::videos/video-tiltshift.mp4[width=720, height=480]


== 7. Filtro homomórfico

Nesta atividade, foi solicitada a implementação de um filtro no domínio da frequência denominado Filtro Homomórfico. Para isso, utilizou-se o programa link:https://eldersantoss.github.io/disciplinas/pdi/unidade2/filtro_frequencia/dft.cpp[dft.cpp] como base.

Download do código link:https://eldersantoss.github.io/disciplinas/pdi/unidade2/filtro_frequencia/homomorfico.cpp[homomorfico.cpp].


.homomorfico.cpp
[source, cpp]
----
include::disciplinas/pdi/unidade2/filtro_frequencia/homomorfico.cpp[]
----


== 8. Kmeans

Para o exercício, foi pedido que se fizesse uma alteração no programa link:https://eldersantoss.github.io/disciplinas/pdi/unidade2/kmeans/kmeans.cpp[kmeans.cpp], para que a execução do código se desse com o parâmetro nRodadas = 1 e os centros fossem iniciados de forma aleatória usando o parâmetro KMEANS_RANDOM_CENTERS. Então, alterados esses parâmetros, realizar 10 rodadas diferentes do algoritmo. Código a seguir:

Download do código link:https://eldersantoss.github.io/disciplinas/pdi/unidade2/kmeans/kmeans.cpp[kmeans.cpp].

.kmeans.cpp
[source, cpp]
----
include::disciplinas/pdi/unidade2/kmeans/kmeans.cpp[]
----

As 10 imagens resultantes do algoritmo, juntamente com a imagem original, podem ser visualizadas link:https://eldersantoss.github.io/disciplinas/pdi/unidade2/kmeans/imagens[aqui].

